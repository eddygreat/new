{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EDWARDM/Desktop/java/2025/nextjs-dashboard/app/seed/route.ts"],"sourcesContent":[" import bcrypt from 'bcrypt';\r\n import { db } from '@vercel/postgres';\r\n import { invoices, customers, revenue, users } from '../lib/placeholder-data';\r\n\r\n const client = await db.connect();\r\n\r\n async function seedUsers() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS users (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       name VARCHAR(255) NOT NULL,\r\n       email TEXT NOT NULL UNIQUE,\r\n       password TEXT NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedUsers = await Promise.all(\r\n     users.map(async (user) => {\r\n       const hashedPassword = await bcrypt.hash(user.password, 10);\r\n       return client.sql`\r\n         INSERT INTO users (id, name, email, password)\r\n         VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `;\r\n     }),\r\n   );\r\n\r\n   return insertedUsers;\r\n }\r\n\r\n async function seedInvoices() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS invoices (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       customer_id UUID NOT NULL,\r\n       amount INT NOT NULL,\r\n       status VARCHAR(255) NOT NULL,\r\n       date DATE NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedInvoices = await Promise.all(\r\n     invoices.map(\r\n       (invoice) => client.sql`\r\n         INSERT INTO invoices (customer_id, amount, status, date)\r\n         VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedInvoices;\r\n }\r\n\r\n async function seedCustomers() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS customers (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       name VARCHAR(255) NOT NULL,\r\n       email VARCHAR(255) NOT NULL,\r\n       image_url VARCHAR(255) NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedCustomers = await Promise.all(\r\n     customers.map(\r\n       (customer) => client.sql`\r\n         INSERT INTO customers (id, name, email, image_url)\r\n         VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedCustomers;\r\n }\r\n\r\n async function seedRevenue() {\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS revenue (\r\n       month VARCHAR(4) NOT NULL UNIQUE,\r\n       revenue INT NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedRevenue = await Promise.all(\r\n     revenue.map(\r\n       (rev) => client.sql`\r\n         INSERT INTO revenue (month, revenue)\r\n         VALUES (${rev.month}, ${rev.revenue})\r\n         ON CONFLICT (month) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedRevenue;\r\n }\r\n\r\nexport async function GET() {\r\n  return Response.json({\r\n    message:\r\n      'Uncomment this file and remove this line. You can delete this file when you are finished.',\r\n  });\r\n   try {\r\n     await client.sql`BEGIN`;\r\n     await seedUsers();\r\n     await seedCustomers();\r\n     await seedInvoices();\r\n     await seedRevenue();\r\n     await client.sql`COMMIT`;\r\n\r\n     return Response.json({ message: 'Database seeded successfully' });\r\n   } catch (error) {\r\n     await client.sql`ROLLBACK`;\r\n     return Response.json({ error }, { status: 500 });\r\n   }\r\n}\r\n"],"names":[],"mappings":";;;AAAC;AACA;AACA;AADA;;;;AAGA,MAAM,SAAS,MAAM,yRAAA,CAAA,KAAE,CAAC,OAAO;AAE/B,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAC5D,MAAM,OAAO,GAAG,CAAC;;;;;;;GAOjB,CAAC;IAED,MAAM,gBAAgB,MAAM,QAAQ,GAAG,CACrC,mIAAA,CAAA,QAAK,CAAC,GAAG,CAAC,OAAO;QACf,MAAM,iBAAiB,MAAM,+FAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;QACxD,OAAO,OAAO,GAAG,CAAC;;iBAER,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,eAAe;;OAEpE,CAAC;IACH;IAGF,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;;GAQjB,CAAC;IAED,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CACxC,mIAAA,CAAA,WAAQ,CAAC,GAAG,CACV,CAAC,UAAY,OAAO,GAAG,CAAC;;iBAEd,EAAE,QAAQ,WAAW,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,IAAI,CAAC;;OAEvF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;GAOjB,CAAC;IAED,MAAM,oBAAoB,MAAM,QAAQ,GAAG,CACzC,mIAAA,CAAA,YAAS,CAAC,GAAG,CACX,CAAC,WAAa,OAAO,GAAG,CAAC;;iBAEf,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE,SAAS,SAAS,CAAC;;OAEpF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC;;;;;GAKjB,CAAC;IAED,MAAM,kBAAkB,MAAM,QAAQ,GAAG,CACvC,mIAAA,CAAA,UAAO,CAAC,GAAG,CACT,CAAC,MAAQ,OAAO,GAAG,CAAC;;iBAEV,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE,IAAI,OAAO,CAAC;;OAEtC,CAAC;IAIL,OAAO;AACT;AAEM,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QACnB,SACE;IACJ;;AAcF"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EDWARDM/Desktop/java/2025/nextjs-dashboard/node_modules/.pnpm/next%4015.0.3_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,6UAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,4SAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,mTAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
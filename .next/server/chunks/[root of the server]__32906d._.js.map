{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EDWARDM/Desktop/java/2025/nextjs-dashboard/app/lib/placeholder-data.ts"],"sourcesContent":["// This file contains placeholder data that you'll be replacing with real data in the Data Fetching chapter:\r\n// https://nextjs.org/learn/dashboard-app/fetching-data\r\nconst users = [\r\n  {\r\n    id: '410544b2-4001-4271-9855-fec4b6a6442a',\r\n    name: 'User',\r\n    email: 'user@nextmail.com',\r\n    password: '123456',\r\n  },\r\n];\r\n\r\nconst customers = [\r\n  {\r\n    id: 'd6e15727-9fe1-4961-8c5b-ea44a9bd81aa',\r\n    name: 'Evil Rabbit',\r\n    email: 'evil@rabbit.com',\r\n    image_url: '/customers/evil-rabbit.png',\r\n  },\r\n  {\r\n    id: '3958dc9e-712f-4377-85e9-fec4b6a6442a',\r\n    name: 'Delba de Oliveira',\r\n    email: 'delba@oliveira.com',\r\n    image_url: '/customers/delba-de-oliveira.png',\r\n  },\r\n  {\r\n    id: '3958dc9e-742f-4377-85e9-fec4b6a6442a',\r\n    name: 'Lee Robinson',\r\n    email: 'lee@robinson.com',\r\n    image_url: '/customers/lee-robinson.png',\r\n  },\r\n  {\r\n    id: '76d65c26-f784-44a2-ac19-586678f7c2f2',\r\n    name: 'Michael Novotny',\r\n    email: 'michael@novotny.com',\r\n    image_url: '/customers/michael-novotny.png',\r\n  },\r\n  {\r\n    id: 'CC27C14A-0ACF-4F4A-A6C9-D45682C144B9',\r\n    name: 'Amy Burns',\r\n    email: 'amy@burns.com',\r\n    image_url: '/customers/amy-burns.png',\r\n  },\r\n  {\r\n    id: '13D07535-C59E-4157-A011-F8D2EF4E0CBB',\r\n    name: 'Balazs Orban',\r\n    email: 'balazs@orban.com',\r\n    image_url: '/customers/balazs-orban.png',\r\n  },\r\n];\r\n\r\nconst invoices = [\r\n  {\r\n    customer_id: customers[0].id,\r\n    amount: 15795,\r\n    status: 'pending',\r\n    date: '2022-12-06',\r\n  },\r\n  {\r\n    customer_id: customers[1].id,\r\n    amount: 20348,\r\n    status: 'pending',\r\n    date: '2022-11-14',\r\n  },\r\n  {\r\n    customer_id: customers[4].id,\r\n    amount: 3040,\r\n    status: 'paid',\r\n    date: '2022-10-29',\r\n  },\r\n  {\r\n    customer_id: customers[3].id,\r\n    amount: 44800,\r\n    status: 'paid',\r\n    date: '2023-09-10',\r\n  },\r\n  {\r\n    customer_id: customers[5].id,\r\n    amount: 34577,\r\n    status: 'pending',\r\n    date: '2023-08-05',\r\n  },\r\n  {\r\n    customer_id: customers[2].id,\r\n    amount: 54246,\r\n    status: 'pending',\r\n    date: '2023-07-16',\r\n  },\r\n  {\r\n    customer_id: customers[0].id,\r\n    amount: 666,\r\n    status: 'pending',\r\n    date: '2023-06-27',\r\n  },\r\n  {\r\n    customer_id: customers[3].id,\r\n    amount: 32545,\r\n    status: 'paid',\r\n    date: '2023-06-09',\r\n  },\r\n  {\r\n    customer_id: customers[4].id,\r\n    amount: 1250,\r\n    status: 'paid',\r\n    date: '2023-06-17',\r\n  },\r\n  {\r\n    customer_id: customers[5].id,\r\n    amount: 8546,\r\n    status: 'paid',\r\n    date: '2023-06-07',\r\n  },\r\n  {\r\n    customer_id: customers[1].id,\r\n    amount: 500,\r\n    status: 'paid',\r\n    date: '2023-08-19',\r\n  },\r\n  {\r\n    customer_id: customers[5].id,\r\n    amount: 8945,\r\n    status: 'paid',\r\n    date: '2023-06-03',\r\n  },\r\n  {\r\n    customer_id: customers[2].id,\r\n    amount: 1000,\r\n    status: 'paid',\r\n    date: '2022-06-05',\r\n  },\r\n];\r\n\r\nconst revenue = [\r\n  { month: 'Jan', revenue: 2000 },\r\n  { month: 'Feb', revenue: 1800 },\r\n  { month: 'Mar', revenue: 2200 },\r\n  { month: 'Apr', revenue: 2500 },\r\n  { month: 'May', revenue: 2300 },\r\n  { month: 'Jun', revenue: 3200 },\r\n  { month: 'Jul', revenue: 3500 },\r\n  { month: 'Aug', revenue: 3700 },\r\n  { month: 'Sep', revenue: 2500 },\r\n  { month: 'Oct', revenue: 2800 },\r\n  { month: 'Nov', revenue: 3000 },\r\n  { month: 'Dec', revenue: 4800 },\r\n];\r\n\r\nexport { users, customers, invoices, revenue };\r\n"],"names":[],"mappings":"AAAA,4GAA4G;AAC5G,uDAAuD;;;;;;;AACvD,MAAM,QAAQ;IACZ;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,UAAU;IACZ;CACD;AAED,MAAM,YAAY;IAChB;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,WAAW;IACb;CACD;AAED,MAAM,WAAW;IACf;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA;QACE,aAAa,SAAS,CAAC,EAAE,CAAC,EAAE;QAC5B,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;CACD;AAED,MAAM,UAAU;IACd;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;IAC9B;QAAE,OAAO;QAAO,SAAS;IAAK;CAC/B"}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EDWARDM/Desktop/java/2025/nextjs-dashboard/app/seed/route.ts"],"sourcesContent":[" import bcrypt from 'bcrypt';\r\n import { db } from '@vercel/postgres';\r\n import { invoices, customers, revenue, users } from '../lib/placeholder-data';\r\n\r\n const client = await db.connect();\r\n\r\n async function seedUsers() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS users (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       name VARCHAR(255) NOT NULL,\r\n       email TEXT NOT NULL UNIQUE,\r\n       password TEXT NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedUsers = await Promise.all(\r\n     users.map(async (user) => {\r\n       const hashedPassword = await bcrypt.hash(user.password, 10);\r\n       return client.sql`\r\n         INSERT INTO users (id, name, email, password)\r\n         VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `;\r\n     }),\r\n   );\r\n\r\n   return insertedUsers;\r\n }\r\n\r\n async function seedInvoices() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS invoices (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       customer_id UUID NOT NULL,\r\n       amount INT NOT NULL,\r\n       status VARCHAR(255) NOT NULL,\r\n       date DATE NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedInvoices = await Promise.all(\r\n     invoices.map(\r\n       (invoice) => client.sql`\r\n         INSERT INTO invoices (customer_id, amount, status, date)\r\n         VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedInvoices;\r\n }\r\n\r\n async function seedCustomers() {\r\n   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\r\n\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS customers (\r\n       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\r\n       name VARCHAR(255) NOT NULL,\r\n       email VARCHAR(255) NOT NULL,\r\n       image_url VARCHAR(255) NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedCustomers = await Promise.all(\r\n     customers.map(\r\n       (customer) => client.sql`\r\n         INSERT INTO customers (id, name, email, image_url)\r\n         VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\r\n         ON CONFLICT (id) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedCustomers;\r\n }\r\n\r\n async function seedRevenue() {\r\n   await client.sql`\r\n     CREATE TABLE IF NOT EXISTS revenue (\r\n       month VARCHAR(4) NOT NULL UNIQUE,\r\n       revenue INT NOT NULL\r\n     );\r\n   `;\r\n\r\n   const insertedRevenue = await Promise.all(\r\n     revenue.map(\r\n       (rev) => client.sql`\r\n         INSERT INTO revenue (month, revenue)\r\n         VALUES (${rev.month}, ${rev.revenue})\r\n         ON CONFLICT (month) DO NOTHING;\r\n       `,\r\n     ),\r\n   );\r\n\r\n   return insertedRevenue;\r\n }\r\n\r\nexport async function GET() {\r\n  return Response.json({\r\n    message:\r\n      'Uncomment this file and remove this line. You can delete this file when you are finished.',\r\n  });\r\n   try {\r\n     await client.sql`BEGIN`;\r\n     await seedUsers();\r\n     await seedCustomers();\r\n     await seedInvoices();\r\n     await seedRevenue();\r\n     await client.sql`COMMIT`;\r\n\r\n     return Response.json({ message: 'Database seeded successfully' });\r\n   } catch (error) {\r\n     await client.sql`ROLLBACK`;\r\n     return Response.json({ error }, { status: 500 });\r\n   }\r\n}\r\n"],"names":[],"mappings":";;;AAAC;AACA;AACA;AADA;;;;AAGA,MAAM,SAAS,MAAM,yRAAA,CAAA,KAAE,CAAC,OAAO;AAE/B,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAC5D,MAAM,OAAO,GAAG,CAAC;;;;;;;GAOjB,CAAC;IAED,MAAM,gBAAgB,MAAM,QAAQ,GAAG,CACrC,mIAAA,CAAA,QAAK,CAAC,GAAG,CAAC,OAAO;QACf,MAAM,iBAAiB,MAAM,+FAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;QACxD,OAAO,OAAO,GAAG,CAAC;;iBAER,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,eAAe;;OAEpE,CAAC;IACH;IAGF,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;;GAQjB,CAAC;IAED,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CACxC,mIAAA,CAAA,WAAQ,CAAC,GAAG,CACV,CAAC,UAAY,OAAO,GAAG,CAAC;;iBAEd,EAAE,QAAQ,WAAW,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,IAAI,CAAC;;OAEvF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;GAOjB,CAAC;IAED,MAAM,oBAAoB,MAAM,QAAQ,GAAG,CACzC,mIAAA,CAAA,YAAS,CAAC,GAAG,CACX,CAAC,WAAa,OAAO,GAAG,CAAC;;iBAEf,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE,SAAS,SAAS,CAAC;;OAEpF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC;;;;;GAKjB,CAAC;IAED,MAAM,kBAAkB,MAAM,QAAQ,GAAG,CACvC,mIAAA,CAAA,UAAO,CAAC,GAAG,CACT,CAAC,MAAQ,OAAO,GAAG,CAAC;;iBAEV,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE,IAAI,OAAO,CAAC;;OAEtC,CAAC;IAIL,OAAO;AACT;AAEM,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QACnB,SACE;IACJ;;AAcF"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}